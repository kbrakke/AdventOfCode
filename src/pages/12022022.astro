---
import Layout from '../layouts/Layout.astro';
import { readFile } from '../components/inputReader';
import { result } from 'lodash';
// A - Rock, B - Paper, C - Scissors
const outcomeDict = {
    'A X': 4, // 1 + 3
    'A Y': 8, // 2 + 6
    'A Z': 3, // 3 + 0
    'B X': 1, // 1 + 0
    'B Y': 5, // 2 + 3
    'B Z': 9, // 3 + 6
    'C X': 7, // 1 + 6
    'C Y': 2, // 2 + 0
    'C Z': 6, // 3 + 3
}
// X - Lose, Y - Draw, Z - Win
const trueOutcomeDict = {
    'A X': 3, // 3 + 0
    'A Y': 4, // 1 + 3
    'A Z': 8, // 2 + 6
    'B X': 1, // 1 + 0
    'B Y': 5, // 2 + 3
    'B Z': 9, // 3 + 6
    'C X': 2, // 2 + 0
    'C Y': 6, // 3 + 3
    'C Z': 7, // 1 + 6
}
const data: string = await readFile('12022022-input.txt');
const moveList: string[] = data.split('\n');
const resultsList: number[] = moveList.map(move => {return outcomeDict[move]});
const finalResult: number = resultsList.reduce((a, b) => a + b);
const trueResultsList: number[] = moveList.map(move => {return trueOutcomeDict[move]});
const trueFinalResult: number = trueResultsList.reduce((a, b) => a + b);
---
<Layout title="Day 2">
    <main>
      <div class="fade-in-text ">
        <h1>--- Day 2: Rock Paper Scissors ---</h1>
        <h2>Step 1: Parsing Input</h2>
        <p>Reading the list of Moves, using '\n' as a seperator.</p>
        <button type="button" class="collapsible">Here is the list of Moves</button>
        <div class="content">
          <ul class="grid" >
            {moveList.map(move => (
              <li>{move}</li>
            ))}
          </ul>
        </div>
        <h2>Step 2: Summing the Actions</h2>
        <p>Reading the list of Moves, mapping is using the outcome dict, then summing</p>
        <button type="button" class="collapsible">Mapping the list of outcomes</button>
        <div class="content">
          <ul class="grid" >
            {resultsList.map(outcome => (
                <li>{outcome}</li>
            ))}
          </ul>
        </div>
        <button type="button" class="collapsible">The Final Total</button>
        <div class="content">
          <ul class="grid" >
            {finalResult}
          </ul>
        </div>
        <h2>Step 3: Recompiling the results</h2>
        <p>Using a new dictionary we remap the same list of moves</p>
        <button type="button" class="collapsible">Remapping the list of outcomes</button>
        <div class="content">
          <ul class="grid" >
            {trueResultsList.map(outcome => (
                <li>{outcome}</li>
            ))}
          </ul>
        </div>
        <button type="button" class="collapsible">The True Final Total</button>
        <div class="content">
          <ul class="grid" >
            {trueFinalResult}
          </ul>
        </div>
      </div>
    </main>
    <script>
      var coll = document.getElementsByClassName("collapsible");
      var i;
  
      for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
          this.classList.toggle("active");
          var content = this.nextElementSibling;
          if (content.style.display === "block") {
            content.style.display = "none";
          } else {
            content.style.display = "block";
          }
        });
      }
    </script>
  </Layout>
  
  <style>
  .fade-in-text {
    font-family: 'Courier New', Courier, monospace;
    font-size: 12px;
    animation: fadeIn 5s;
    -webkit-animation: fadeIn 5s;
    -moz-animation: fadeIn 5s;
    -o-animation: fadeIn 5s;
    -ms-animation: fadeIn 5s;
  }
  @keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
  }
  
  ul {
    list-style-type: none; /* Remove bullets */
    padding: 0; /* Remove padding */
    margin: 0; /* Remove margins */
  }
  
  ul li {
    border: 1px solid #ddd; /* Add a thin border to each list item */
    margin-top: -1px; /* Prevent double borders */
    background-color: #f6f6f6; /* Add a grey background color */
    padding: 12px; /* Add some padding */
  }
  .collapsible {
    font-family: 'Courier New', Courier, monospace;
    background-color: #eee;
    color: #444;
    cursor: pointer;
    padding: 18px;
    width: 100%;
    border: none;
    text-align: left;
    outline: none;
    font-size: 15px;
  }
  
  /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
  .active, .collapsible:hover {
    background-color: #ccc;
  }
  
  /* Style the collapsible content. Note: hidden by default */
  .content {
    font-family: 'Courier New', Courier, monospace;
    padding: 0 18px;
    display: none;
    overflow: hidden;
    background-color: #f1f1f1;
  }
  </style>